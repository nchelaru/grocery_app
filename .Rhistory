library(RCurl)
library(XML)
library(jsonlite)
library(dplyr)
library(anytime)
url_list <- c('https://itunes.apple.com/search?term="data+science"&media=podcast&limit=200&entity=podcast&attribute=descriptionTerm',
'https://itunes.apple.com/search?term="machine+learning"&media=podcast&limit=200&entity=podcast&attribute=descriptionTerm',
'https://itunes.apple.com/search?term="artificial+intelligence"&media=podcast&limit=200&entity=podcast&attribute=descriptionTerm')
df_list <- list()
for (i in seq_along(url_list)){
pod <- GET(url_list[i])
pod_text <- content(pod, "text")
pod_json <- fromJSON(pod_text, flatten = TRUE)
df_list[[i]] <- as.data.frame(pod_json)
}
all_pod <- bind_rows(df_list)
uniques <- all_pod[!duplicated(all_pod['results.collectionName']), ][, c('results.collectionName',
'results.feedUrl', 'results.artworkUrl600',
'results.collectionViewUrl', 'results.artistName',
'results.genres', 'results.releaseDate', 'results.trackCount')]
## Split up tags
uniques$results.genres <- sapply(uniques$results.genres, function(x) paste(x, collapse=", "))
## Filter by date
uniques$results.releaseDate <- anydate(uniques$results.releaseDate)
uniques <- uniques[order(as.Date(uniques$results.releaseDate), decreasing=FALSE),]
uniques <- subset(uniques, format(as.Date(uniques$results.releaseDate),"%Y") > 2018)
## Remove podcasts without feed URL
uniques <- subset(uniques, !is.na(uniques$results.feedUrl) )
## Remove podcasts without "Technology" tag
uniques <- uniques[grep("Technology", uniques$results.genres),]
## Rename columns
colnames(uniques) <- c('Title', 'FeedURL', 'ArtworkURL', 'URL', 'Creator', 'Tags', 'ReleaseDate', 'TrackCount')
## Import libraries
library(xml2)
library(rvest)
library(stringr)
library(dplyr)
## Define function to scraping for podcast description
get_desc <- function(url){
tryCatch(
exp = {
webpage <- read_html(url)
des <- webpage %>% html_node(".product-hero-desc__section") %>% html_text()
return(str_remove_all(des, "\n"))
},
error = function(e) {
return('Unavailable')
},
finally = {
}
)}
## Define function for scraping rating
get_rating <- function(url){
tryCatch(
exp = {
webpage <- read_html(url)
x <- webpage %>% html_node(".we-star-rating") %>% html_text()
return(str_remove_all(x, "\n"))
},
error = function(e) {
return('Unavailable')
},
finally = {
}
)
}
uniques$Description <- sapply(uniques$URL, function(x) get_desc(x))
uniques$Rating <- sapply(uniques$URL, function(x) get_rating(x))
library(stringr)
library(knitr)
library(kableExtra)
kable(t(head(uniques)), format='html', escape=F, col.names = NULL) %>%
kable_styling(full_width=T, bootstrap_options = c("striped", "hover")) %>%
column_spec(2:4, width='16em')
dbWriteTable(con, "podcasts", uniques, overwrite=TRUE)
dbListTables(con)
dbListFields(con, "podcasts")
library(stringr)
library(knitr)
library(kableExtra)
kable(t(head(uniques)), format='html', escape=F, col.names = NULL) %>%
kable_styling(full_width=T, bootstrap_options = c("striped", "hover"))
install.packages(c("afex", "anytime", "arules", "chron", "coin", "DALEX", "funModeling", "ggExtra", "groupedstats", "ingredients", "lavaan", "libcoin", "magick", "oompaBase", "pkgbuild", "rcompanion", "regtools", "runjags", "seriation", "summarytools", "units", "visNetwork", "whisker"))
#### Some final data cleaning
## Import library
library(data.table)
## Import library
library(RPostgres)
# Connect to my Heroku PostgreSQL database
Sys.getenv('./Renviron')
con <- dbConnect(Postgres(),
dbname = "d2s6iokokikv66",
host = "ec2-174-129-18-42.compute-1.amazonaws.com",
port = '5432',
user = "xttqqlhbdystbx",
password = Sys.getenv('PASSWORD'))
#### Query iTunes Search API for podcast listing
## Import libraries
library(httr)
library(RCurl)
library(XML)
library(jsonlite)
library(dplyr)
library(anytime)
## Get podcast titles and metadata
url_list <- c('https://itunes.apple.com/search?term="data+science"&media=podcast&limit=200&entity=podcast&attribute=descriptionTerm',
'https://itunes.apple.com/search?term="machine+learning"&media=podcast&limit=200&entity=podcast&attribute=descriptionTerm',
'https://itunes.apple.com/search?term="artificial+intelligence"&media=podcast&limit=200&entity=podcast&attribute=descriptionTerm',
'https://itunes.apple.com/search?term="big+data"&media=podcast&limit=200&entity=podcast&attribute=descriptionTerm')
df_list <- list()
for (i in seq_along(url_list)){
pod <- GET(url_list[i])
pod_text <- content(pod, "text")
pod_json <- fromJSON(pod_text, flatten = TRUE)
df_list[[i]] <- as.data.frame(pod_json)
}
all_pod <- bind_rows(df_list)
## Deduplicate by podcast title
col_list <- c('results.collectionName',
'results.feedUrl', 'results.artworkUrl600',
'results.collectionViewUrl', 'results.artistName',
'results.genres', 'results.releaseDate',
'results.trackCount')
uniques <- all_pod[!duplicated(all_pod['results.collectionName']), ][, col_list]
## Split up tags into comma separated strings
uniques$results.genres <- sapply(uniques$results.genres, function(x) paste(x, collapse=", "))
## Filter out podcasts that have not updated since 2018
uniques$results.releaseDate <- anydate(uniques$results.releaseDate)
uniques <- uniques[order(as.Date(uniques$results.releaseDate), decreasing=TRUE),]
uniques <- subset(uniques, format(as.Date(uniques$results.releaseDate),"%Y") > 2018)
## Remove podcasts without feed URL
uniques <- subset(uniques, !is.na(uniques$results.feedUrl) )
## Remove podcasts without "Technology" tag
uniques <- uniques[grep("Technology", uniques$results.genres),]
## Rename columns
colnames(uniques) <- c('Title', 'FeedURL', 'ArtworkURL', 'URL', 'Creator', 'Tags', 'ReleaseDate', 'TrackCount')
#### Scrape iTunes store page for podcast description and rating
## Import libraries
library(xml2)
library(rvest)
library(stringr)
library(splitstackshape)
## Define function to scraping for podcast description
get_desc <- function(url){
tryCatch(
exp = {
webpage <- read_html(url)
des <- webpage %>% html_node(".product-hero-desc__section") %>% html_text()
return(str_remove_all(des, "\n"))
},
error = function(e) {
return('Unavailable')
},
finally = {
}
)}
## Scrape descriptions
uniques$Description <- sapply(uniques$URL, function(x) get_desc(x))
## Filter out podcasts that do not contain certain strings in description
uniques <- filter(uniques, grepl('data|Data|machine|Machine|artificial|Artificial|intelligence|Intelligence', Description))
## Define function for scraping rating
get_rating <- function(url){
tryCatch(
exp = {
webpage <- read_html(url)
x <- webpage %>% html_node(".we-star-rating") %>% html_text()
return(str_remove_all(x, "\n"))
},
error = function(e) {
return('Unavailable')
},
finally = {
}
)
}
## Scrape ratings
uniques$Rating <- sapply(uniques$URL, function(x) get_rating(x))
#### Get working feed URLs
uniques$NewFeedURL <- sapply(uniques$FeedURL, function(x) GET(x)$url)
#### Some final data cleaning
## Import library
library(data.table)
## Split up and rename ratings column
uniques <- cSplit(uniques, "Rating", sep=",")
setnames(uniques, old = c('Rating_1', 'Rating_2'), new = c('AvgRating', 'NumRatings'))
#### Write data to PostgreSQL database
dbWriteTable(con, "podcasts", uniques, overwrite=TRUE)
#### Send email to confirm
library(mailR)
sender <- "intelligence.refinery@gmail.com"
recipients <- c("nancy.chelaru@gmail.com")
send.mail(from = sender,
to = recipients,
subject = "Script ran!",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "intelligence.refinery@gmail.com",
passwd = Sys.getenv('EM_PW'), ssl = TRUE),
authenticate = TRUE,
send = TRUE)
install.packages("rJava", dependencies = TRUE)
library(mailR)
sender <- "intelligence.refinery@gmail.com"
recipients <- c("nancy.chelaru@gmail.com")
send.mail(from = sender,
to = recipients,
subject = "Script ran!",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "intelligence.refinery@gmail.com",
passwd = Sys.getenv('EM_PW'), ssl = TRUE),
authenticate = TRUE,
send = TRUE)
install.packages("gmailr")
library(gmailR)
sender <- "intelligence.refinery@gmail.com"
recipients <- c("nancy.chelaru@gmail.com")
send.mail(from = sender,
to = recipients,
subject = "Script ran!",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465,
user.name = "intelligence.refinery@gmail.com",
passwd = Sys.getenv('EM_PW'), ssl = TRUE),
authenticate = TRUE,
send = TRUE)
#### Send email to confirm
library(gmailR)
test_email <-
gm_mime() %>%
gm_to("intelligence.refinery@gmail.com") %>%
gm_from("nandong823@gmail.com") %>%
gm_subject("this is just a gmailr test") %>%
gm_text_body("Can you hear me now?")
# Verify it looks correct
gm_create_draft(test_email)
# If all is good with your draft, then you can send it
gm_send_message(test_email)
library(gmailr)
test_email <-
gm_mime() %>%
gm_to("intelligence.refinery@gmail.com") %>%
gm_from("nandong823@gmail.com") %>%
gm_subject("this is just a gmailr test") %>%
gm_text_body("Can you hear me now?")
# Verify it looks correct
gm_create_draft(test_email)
# If all is good with your draft, then you can send it
gm_send_message(test_email)
library(gmailr)
gm_auth_configure(path = "./credentials.json")
test_email <-
gm_mime() %>%
gm_to("intelligence.refinery@gmail.com") %>%
gm_from("nandong823@gmail.com") %>%
gm_subject("this is just a gmailr test") %>%
gm_text_body("Can you hear me now?")
# Verify it looks correct
gm_create_draft(test_email)
# If all is good with your draft, then you can send it
gm_send_message(test_email)
library(gmailr)
gm_auth_configure(path = "./credentials.json")
gm_auth_configure(path = "~/Documents/Github/update-pod-db/credentials.json")
gm_auth()
library(gmailr)
gm_auth_configure(path = "~/Documents/Github/update-pod-db/credentials.json")
gm_auth(email = TRUE, cache = ".secret")
test_email <-
gm_mime() %>%
gm_to("intelligence.refinery@gmail.com") %>%
gm_from("nandong823@gmail.com") %>%
gm_subject("this is just a gmailr test") %>%
gm_text_body("Can you hear me now?")
# Verify it looks correct
gm_create_draft(test_email)
# If all is good with your draft, then you can send it
gm_send_message(test_email)
library(gmailr)
gm_auth_configure(path = "~/Documents/Github/update-pod-db/credentials.json")
gm_auth(email = TRUE, cache = ".secret")
test_email <-
gm_mime() %>%
gm_to("intelligence.refinery@gmail.com") %>%
gm_from("nandong823@gmail.com") %>%
gm_subject("this is just a gmailr test") %>%
gm_text_body("Can you hear me now?")
# Verify it looks correct
gm_create_draft(test_email)
# If all is good with your draft, then you can send it
gm_send_message(test_email)
library(gmailr)
gm_auth_configure(path = "~/Documents/Github/update-pod-db/credentials.json")
gm_auth(email = TRUE, cache = ".secret")
test_email <-
gm_mime() %>%
gm_to("nandong823@gmail.com") %>%
gm_from("intelligence.refinery@gmail.com") %>%
gm_subject("this is just a gmailr test") %>%
gm_text_body("The job ran")
# Verify it looks correct
gm_create_draft(test_email)
# If all is good with your draft, then you can send it
gm_send_message(test_email)
library(gmailr)
gm_auth_configure(path = "~/Documents/Github/update-pod-db/credentials.json")
gm_auth(email = TRUE, cache = ".secret")
test_email <-
gm_mime() %>%
gm_to("nandong823@gmail.com") %>%
gm_from("intelligence.refinery@gmail.com") %>%
gm_subject("this is just a gmailr test") %>%
gm_text_body("The job ran")
# Verify it looks correct
gm_create_draft(test_email)
# If all is good with your draft, then you can send it
gm_send_message(test_email)
library(gmailr)
gm_auth_configure(path = "~/Documents/Github/update-pod-db/credentials.json")
gm_auth(email = TRUE, cache = ".secret")
test_email <-
gm_mime() %>%
gm_to("nandong823@gmail.com") %>%
gm_from("intelligence.refinery@gmail.com") %>%
gm_subject("this is just a gmailr test") %>%
gm_text_body("The job ran")
# Verify it looks correct
gm_create_draft(test_email)
# If all is good with your draft, then you can send it
gm_send_message(test_email)
blogdown:::serve_site()
shiny::runApp('Documents/GitHub/podcast_db')
runApp('Desktop/camera_app/shinydb')
library(RPostgres)
con <- dbConnect(
Postgres(),
dbname = "d2sjdih8tegcuc",
host = "ec2-184-72-238-22.compute-1.amazonaws.com",
port = '5432',
user = "xkktypszvisogc",
password = "35b7eb67cab6ea1750e5877d61c3415851d6f1ca9c5782ec0b6bf91ede8acbea",
sslmode = 'require'
)
library(RPostgres)
con <- dbConnect(
Postgres(),
dbname = "d2sjdih8tegcuc",
host = "ec2-184-72-238-22.compute-1.amazonaws.com",
port = '5432',
user = "xkktypszvisogc",
password = "35b7eb67cab6ea1750e5877d61c3415851d6f1ca9c5782ec0b6bf91ede8acbea",
sslmode = 'require'
)
df <- dbGetQuery(con, "SELECT * FROM apptest")
remotes::install_github("jbryer/makeR")
library(makeR)
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
calendarHeat(df$date, df$TotalPrice, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close")
library(makeR)
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
x <- calendarHeat(df$date, df$TotalPrice, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close")
length(x)
x$2019
summary(x)
x
df <- dbGetQuery(con, "select sum (apptest.TotalPrice) from apptest group by apptest.date")
df <- dbGetQuery(con, "select sum (TotalPrice) from apptest group by date")
library(makeR)
x <- aggregate(df$TotalPrice, by=list(Category=df$date), FUN=sum)
x
library(makeR)
x <- aggregate(df$TotalPrice, by=list(Category=df$date), FUN=sum)
colnames(x) <- c("Date", "TotalSpent")
x
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
calendarHeat(x$date, x$TotalPrice, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close")
library(makeR)
x <- aggregate(df$TotalPrice, by=list(Category=df$date), FUN=sum)
colnames(x) <- c("Date", "TotalSpent")
x <- as.data.frame(x)
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
calendarHeat(x$date, x$TotalPrice, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close")
library(makeR)
x <- aggregate(df$TotalPrice, by=list(Category=df$date), FUN=sum)
colnames(x) <- c("Date", "TotalSpent")
x <- as.data.frame(x)
x
library(makeR)
x <- aggregate(df$TotalPrice, by=list(Category=df$date), FUN=sum)
colnames(x) <- c("Date", "TotalSpent")
x <- as.data.frame(x)
x$date <- as.Date(x$date)
library(makeR)
x <- aggregate(df$TotalPrice, by=list(Category=df$date), FUN=sum)
colnames(x) <- c("Date", "TotalSpent")
x <- as.data.frame(x)
x$Date <- as.Date(x$Date)
x
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
calendarHeat(x$date, x$TotalPrice, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close")
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
calendarHeat(x$Date, x$TotalSpent, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close")
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
x[1, ] <- NULL
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
calendarHeat(x$Date, x$TotalSpent, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close")
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
class(calendarHeat(x$Date, x$TotalSpent, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close"))
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
calendarHeat(x$Date, x$TotalSpent, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close")[-1]
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
calendarHeat(x$Date, x$TotalSpent, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close")[1]
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
length(calendarHeat(x$Date, x$TotalSpent, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close"))
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
length(calendarHeat(x$Date, x$TotalSpent, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close")[1])
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
length(calendarHeat(x$Date, x$TotalSpent, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close")[[1]])
library(plyr)
library(plotly)
x$weekday = as.POSIXlt(x$Date)$wday #finding the day no. of the week
x$weekdayf<-factor(x$weekday,levels=rev(1:7),labels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")),ordered=TRUE) # converting the day no. to factor
x
library(plyr)
library(dplyr)
library(plotly)
x$weekday = as.POSIXlt(x$Date)$wday #finding the day no. of the week
x$weekdayf<-factor(x$weekday,levels=rev(1:7),labels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")),ordered=TRUE) # converting the day no. to factor
x
library(plyr)
library(dplyr)
library(plotly)
x$weekday = as.POSIXlt(x$Date)$wday #finding the day no. of the week
x$weekdayf<-factor(x$weekday,levels=rev(0:6),labels=rev(c("Sun", "Mon","Tue","Wed","Thu","Fri","Sat")),ordered=TRUE) # converting the day no. to factor
x
x$monthf<-factor(month(x$Date),levels=as.character(1:12),labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE) # finding the month
library(plyr)
library(dplyr)
library(plotly)
x$weekday = as.POSIXlt(x$Date)$wday #finding the day no. of the week
x$weekdayf<-factor(x$weekday,levels=rev(0:6),labels=rev(c("Sun", "Mon","Tue","Wed","Thu","Fri","Sat")),ordered=TRUE) # converting the day no. to factor
x
x$monthf<-factor(month(x$Date),levels=as.character(1:12),labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE) # finding the month
library(tidyquant)
install.packages("tidyquant")
library(tidyquant)
x$monthf<-factor(month(x$Date),levels=as.character(1:12),labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE) # finding the month
x$yearmonth<- factor(as.yearmon(x$Date)) # finding the year and the month from the date. Eg: Nov 2018
x$week <- as.numeric(format(x$Date,"%W")) # finding the week of the year for each date
x <-ddply(x,.(yearmonth),transform,monthweek=1+week-min(week)) # normalizing the week to start at 1 for every month
library(tidyquant)
x$monthf<-factor(month(x$Date),levels=as.character(1:12),labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE) # finding the month
x$yearmonth<- factor(as.yearmon(x$Date)) # finding the year and the month from the date. Eg: Nov 2018
x$week <- as.numeric(format(x$Date,"%W")) # finding the week of the year for each date
x <-ddply(x,.(yearmonth),transform,monthweek=1+week-min(week)) # normalizing the week to start at 1 for every month
library(tidyquant)
x$monthf<-factor(month(x$Date),levels=as.character(1:12),labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),ordered=TRUE) # finding the month
x$yearmonth<- factor(as.yearmon(x$Date)) # finding the year and the month from the date. Eg: Nov 2018
x$week <- as.numeric(format(x$Date,"%W")) # finding the week of the year for each date
x <- ddply(x,.(yearmonth),transform,monthweek=1+week-min(week)) # normalizing the week to start at 1 for every month
x
ggplot(x, aes(monthweek, weekdayf, fill = x$TotalSpent)) +
geom_tile(colour = "white") + facet_grid(year(x$Date)~monthf) + scale_fill_gradient(low="red", high="green") +  xlab("Week of Month") + ylab("") + ggtitle("Time-Series Calendar Heatmap: AMZN Stock Prices") + labs(fill = "Price")
x$week <- as.integer(x$week)
x
x$week <- as.integer(x$week)
x$monthweek <- as.integer(x$monthweek)
x
ggplot(x, aes(monthweek, weekdayf, fill = x$TotalSpent)) +
geom_tile(colour = "white") + facet_grid(year(x$Date)~monthf) + scale_fill_gradient(low="red", high="green") +  xlab("Week of Month") + ylab("") + ggtitle("Time-Series Calendar Heatmap: AMZN Stock Prices") + labs(fill = "Price")
ggplot(x, aes(monthweek, weekdayf, fill = x$TotalSpent)) +
geom_tile(colour = "white") + facet_grid(year(x$Date)~monthf) + scale_fill_gradient(low="red", high="green") +  xlab("Week of Month") + ylab("") + ggtitle("Time-Series Calendar Heatmap: AMZN Stock Prices") + labs(fill = "Price")
x$week <- as.integer(x$week)
x$monthweek <- as.integer(x$monthweek)
x
x <- x[-c(1),]
ggplot(x, aes(monthweek, weekdayf, fill = x$TotalSpent)) +
geom_tile(colour = "white") + facet_grid(year(x$Date)~monthf) + scale_fill_gradient(low="red", high="green") +  xlab("Week of Month") + ylab("") + ggtitle("Time-Series Calendar Heatmap: AMZN Stock Prices") + labs(fill = "Price")
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
calendarHeat(x$Date,  x$TotalSpent, ncolors = 99, color = "r2g", varname="AMZN Adjusted Close")
r2g <- c("#D61818", "#FFAE63", "#FFFFBD", "#B5E384")
calendarHeat(x$Date,  x$TotalSpent, ncolors = 99, color = "r2g", varname=NULL)
ggplot(x, aes(monthweek, weekdayf, fill = x$TotalSpent)) +
geom_tile(colour = "white") + facet_grid(year(x$Date)~monthf) + scale_fill_gradient(low="red", high="green") +  xlab("Week of Month") + ylab("")  + labs(fill = "Price")
ggplot(x, aes(monthweek, weekdayf, fill = x$TotalSpent)) +
geom_tile(colour = "white") + facet_grid(year(x$Date)~monthf) + scale_fill_gradient(low="red", high="green") +  xlab("Week of Month") + ylab("")  + labs(fill = "Price") + xlim(0,5)
ggplot(x, aes(monthweek, weekdayf, fill = x$TotalSpent)) +
geom_tile(colour = "white") + facet_grid(year(x$Date)~monthf) + scale_fill_gradient(low="red", high="green") +  xlab("Week of Month") + ylab("")  + labs(fill = "Price") + xlim(1,5)
ggplot(x, aes(monthweek, weekdayf, fill = x$TotalSpent)) +
geom_tile(colour = "white") + facet_grid(year(x$Date)~monthf) + scale_fill_gradient(low="red", high="green") +  xlab("Week of Month") + ylab("")  + labs(fill = "Price") + xlim(1,5) + theme_classic()
runApp('Desktop/camera_app/shinydb')
ggplot(x, aes(monthweek, weekdayf, fill = x$TotalSpent)) +
geom_tile(colour = "white") + facet_grid(year(x$Date)~monthf) + scale_fill_gradient(low="red", high="green") +  xlab("Week of Month") + ylab("")  + labs(fill = "Price") + xlim(1,5) + theme_void()
ggplot(x, aes(monthweek, weekdayf, fill = x$TotalSpent)) +
geom_tile(colour = "white") + facet_grid(year(x$Date)~monthf) + scale_fill_gradient(low="red", high="green") +  xlab("Week of Month") + ylab("")  + labs(fill = "Price") + xlim(1,5) + theme_void()
ggplot(x, aes(monthweek, weekdayf, fill = x$TotalSpent)) +
geom_tile(colour = "white") + facet_grid(year(x$Date)~monthf) + scale_fill_gradient(low="red", high="green") +  xlab("Week of Month") + ylab("")  + labs(fill = "Price") + xlim(1,5) + theme_hc()
library(ggthemes)
ggplot(x, aes(monthweek, weekdayf, fill = x$TotalSpent)) +
geom_tile(colour = "white") + facet_grid(year(x$Date)~monthf) + scale_fill_gradient(low="red", high="green") +  xlab("Week of Month") + ylab("")  + labs(fill = "Price") + xlim(1,5) + theme_hc()
library(ggthemes)
ggplot(x, aes(monthweek, weekdayf, fill = x$TotalSpent)) +
geom_tile(colour = "white") + facet_grid(year(x$Date)~monthf) + scale_fill_gradient(low="red", high="green") +  xlab("Week of Month") + ylab("")  + labs(fill = "Price") + xlim(1,5) + theme_hc()
shiny::runApp('Desktop/bulma_app')
runApp('Desktop/camera_app/shinydb')
runApp('Documents/GitHub/podcast_db')
runApp('Documents/GitHub/podcast_db')
shiny::runApp('Documents/GitHub/podcast_db')
runApp('Desktop/bulma_app')
install.packages("shinyjqui")
shiny::runApp('~/Documents/GitHub/podcast_db')
runApp('~/Desktop/camera_app/shinydb')
