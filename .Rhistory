pur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("Item", "Unit price ($)", "Total price ($)", "Purchase date", "Store")
pur_hist <-  pur_hist[!(is.na(pur_hist$Item) | pur_hist$Item==""), ]
pur_hist %>%
separate('Purchase date', sep="-", into = c("year", "month", "day"))
curr_month <- format(Sys.Date(), "%m")
pur_hist_curr_month <- pur_hist[pur_hist$month == curr_month, ]
pur_hist_curr_month
library(openair)
library(anytime)
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("Item", "Unit price ($)", "Total price ($)", "Purchase date", "Store")
pur_hist <-  pur_hist[!(is.na(pur_hist$Item) | pur_hist$Item==""), ]
pur_hist %>%
separate('Purchase date', sep="-", into = c("year", "month", "day"))
curr_month <- format(Sys.Date(), "%m")
pur_hist_curr_month <- pur_hist[(pur_hist$month == curr_month), ]
pur_hist_curr_month
library(openair)
library(anytime)
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("Item", "Unit price ($)", "Total price ($)", "Purchase date", "Store")
pur_hist <-  pur_hist[!(is.na(pur_hist$Item) | pur_hist$Item==""), ]
pur_hist %>%
separate('Purchase date', sep="-", into = c("year", "month", "day"))
curr_month <- format(Sys.Date(), "%m")
pur_hist_curr_month <- pur_hist[pur_hist$month == curr_month]
pur_hist_curr_month
library(openair)
library(anytime)
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("Item", "Unit price ($)", "Total price ($)", "Purchase date", "Store")
pur_hist <-  pur_hist[!(is.na(pur_hist$Item) | pur_hist$Item==""), ]
pur_hist %>%
separate('Purchase date', sep="-", into = c("year", "month", "day"))
curr_month <- format(Sys.Date(), "%m")
pur_hist_curr_month <- subset(pur_hist, pur_hist$month == curr_month)
pur_hist_curr_month
library(openair)
library(anytime)
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("Item", "Unit price ($)", "Total price ($)", "Purchase date", "Store")
pur_hist <-  pur_hist[!(is.na(pur_hist$Item) | pur_hist$Item==""), ]
pur_hist %>%
separate('Purchase date', sep="-", into = c("year", "month", "day"))
curr_month <- format(Sys.Date(), "%m")
pur_hist_curr_month <- pur_hist[pur_hist$month == curr_month, ]
pur_hist_curr_month
library(openair)
library(anytime)
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("Item", "Unit price ($)", "Total price ($)", "Purchase date", "Store")
pur_hist <-  pur_hist[!(is.na(pur_hist$Item) | pur_hist$Item==""), ]
pur_hist <- pur_hist %>%
separate('Purchase date', sep="-", into = c("year", "month", "day"))
curr_month <- format(Sys.Date(), "%m")
pur_hist_curr_month <- pur_hist[pur_hist$month == curr_month, ]
pur_hist_curr_month
runApp()
runApp()
shiny::runApp()
runApp()
format(Sys.Date(), "%m") - 1
x
x <- 1
format(Sys.Date(), "%m") - 1
runApp()
curr_month <- format(Sys.Date(), "%m")
last_month = int(curr_month) - 1
last_month = as.numeric(curr_month) - 1
last_month
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(RPostgres)
library(DBI)
con <- dbConnect(
Postgres(),
dbname = "d2sjdih8tegcuc",
host = "ec2-184-72-238-22.compute-1.amazonaws.com",
port = '5432',
user = "xkktypszvisogc",
password = "35b7eb67cab6ea1750e5877d61c3415851d6f1ca9c5782ec0b6bf91ede8acbea",
sslmode = 'require'
)
df = data.frame("item" = character(1),
"unitprice"= double(1),
"totalprice"= double(1),
"date" = Sys.Date(),
"store" = character(1),
stringsAsFactors = FALSE)
dbWriteTable(con, "grocery", df, overwrite=FALSE)
library(RPostgres)
library(DBI)
con <- dbConnect(
Postgres(),
dbname = "d2sjdih8tegcuc",
host = "ec2-184-72-238-22.compute-1.amazonaws.com",
port = '5432',
user = "xkktypszvisogc",
password = "35b7eb67cab6ea1750e5877d61c3415851d6f1ca9c5782ec0b6bf91ede8acbea",
sslmode = 'require'
)
df = data.frame("item" = character(1),
"unitprice"= double(1),
"totalprice"= double(1),
"date" = Sys.Date(),
"store" = character(1),
stringsAsFactors = FALSE)
dbWriteTable(con, "grocery", df, overwrite=TRUE)
runApp()
library(quantmod)
library(ggplot2)
library(zoo)
## Aggregate by date
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("item", "unitprice", "totalprice", "date", "store")
pur_hist <-  pur_hist[!(is.na(pur_hist$item) | pur_hist$item==""), ]
dat <- pur_hist %>%
group_by(date) %>%
summarise(date_total=sum(totalprice))
## Preview data
kable(head(dat)) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
scroll_box(width='100%')
library(quantmod)
library(ggplot2)
library(zoo)
## Aggregate by date
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("item", "unitprice", "totalprice", "date", "store")
pur_hist <-  pur_hist[!(is.na(pur_hist$item) | pur_hist$item==""), ]
dat <- pur_hist %>%
group_by(date) %>%
summarise(date_total=sum(totalprice))
## Preview data
kable(head(dat))
library(quantmod)
library(ggplot2)
library(zoo)
## Aggregate by date
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("item", "unitprice", "totalprice", "date", "store")
pur_hist <-  pur_hist[!(is.na(pur_hist$item) | pur_hist$item==""), ]
dat <- pur_hist %>%
group_by(date) %>%
summarise(date_total=sum(totalprice))
## Preview data
kable(dat)
library(quantmod)
library(ggplot2)
library(zoo)
## Aggregate by date
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("item", "unitprice", "totalprice", "date", "store")
pur_hist <-  pur_hist[!(is.na(pur_hist$item) | pur_hist$item==""), ]
dat <- pur_hist %>%
group_by(date) %>%
summarise(date_total=sum(totalprice))
# We will facet by year ~ month, and each subgraph will
# show week-of-month versus weekday
# the year is simple
dat$year <- as.numeric(as.POSIXlt(dat$Date)$year+1900)
library(quantmod)
library(ggplot2)
library(zoo)
## Aggregate by date
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("item", "unitprice", "totalprice", "date", "store")
pur_hist <-  pur_hist[!(is.na(pur_hist$item) | pur_hist$item==""), ]
dat <- pur_hist %>%
group_by(date) %>%
summarise(date_total=sum(totalprice))
# We will facet by year ~ month, and each subgraph will
# show week-of-month versus weekday
# the year is simple
dat$year <- as.numeric(as.POSIXlt(dat$date)$year+1900)
# the month too
dat$month <- as.numeric(as.POSIXlt(dat$date)$mon+1)
# but turn months into ordered facors to control the appearance/ordering in the presentation
dat$monthf<-factor(dat$month,
levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),
ordered=TRUE)
# the day of week is again easily found
dat$weekday = as.POSIXlt(dat$date)$wday
# I use the reverse function rev here to order the week top down in the graph
dat$weekdayf<-factor(dat$weekday,
levels=rev(c(1, 2, 3, 4, 5, 6, 0)),
labels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat", "Sun")),
ordered=TRUE)
# first a factor which cuts the data into month chunks
dat$yearmonth<-as.yearmon(dat$date)
dat$yearmonthf<-factor(dat$yearmonth)
# then find the "week of year" for each day
dat$week <- as.numeric(format(dat$date,"%W"))
# and now for each monthblock we normalize the week to start at 1
dat <- ddply(dat,
.(yearmonthf),
transform,
monthweek=1+week-min(week))
## Previewdata
head(dat)
library(plotly)
ggplotly(ggplot(dat, aes(monthweek, weekdayf, fill = Date_total)) +
geom_tile(colour = "white") + facet_grid(year~monthf) + scale_fill_gradient(low="green", high="red") +
xlab("\n\nWeek of Month") + ylab("")  + theme_classic() + scale_x_continuous(breaks = seq(1, 6, 1)))
library(plotly)
ggplotly(ggplot(dat, aes(monthweek, weekdayf, fill = date_total)) +
geom_tile(colour = "white") + facet_grid(year~monthf) + scale_fill_gradient(low="green", high="red") +
xlab("\n\nWeek of Month") + ylab("")  + theme_classic() + scale_x_continuous(breaks = seq(1, 6, 1)))
pur_hist %>%
group_by(store) %>%
summarise(date_total=sum(totalprice))
query <- "UPDATE grocery
SET store='H-Mart'
WHERE store='H Mart'"
dbSendStatement(con, query)
library(quantmod)
library(ggplot2)
library(zoo)
## Aggregate by date
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("item", "unitprice", "totalprice", "date", "store")
pur_hist <-  pur_hist[!(is.na(pur_hist$item) | pur_hist$item==""), ]
dat <- pur_hist %>%
group_by(date) %>%
summarise(date_total=sum(totalprice))
# We will facet by year ~ month, and each subgraph will
# show week-of-month versus weekday
# the year is simple
dat$year <- as.numeric(as.POSIXlt(dat$date)$year+1900)
# the month too
dat$month <- as.numeric(as.POSIXlt(dat$date)$mon+1)
# but turn months into ordered facors to control the appearance/ordering in the presentation
dat$monthf<-factor(dat$month,
levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),
ordered=TRUE)
# the day of week is again easily found
dat$weekday = as.POSIXlt(dat$date)$wday
# I use the reverse function rev here to order the week top down in the graph
dat$weekdayf<-factor(dat$weekday,
levels=rev(c(1, 2, 3, 4, 5, 6, 0)),
labels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat", "Sun")),
ordered=TRUE)
# first a factor which cuts the data into month chunks
dat$yearmonth<-as.yearmon(dat$date)
dat$yearmonthf<-factor(dat$yearmonth)
# then find the "week of year" for each day
dat$week <- as.numeric(format(dat$date,"%W"))
# and now for each monthblock we normalize the week to start at 1
dat <- ddply(dat,
.(yearmonthf),
transform,
monthweek=1+week-min(week))
## Previewdata
head(dat)
library(quantmod)
library(ggplot2)
library(zoo)
## Aggregate by date
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery)
colnames(pur_hist) <- c("item", "unitprice", "totalprice", "date", "store")
library(quantmod)
library(ggplot2)
library(zoo)
## Aggregate by date
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery")
colnames(pur_hist) <- c("item", "unitprice", "totalprice", "date", "store")
pur_hist <-  pur_hist[!(is.na(pur_hist$item) | pur_hist$item==""), ]
dat <- pur_hist %>%
group_by(date) %>%
summarise(date_total=sum(totalprice))
# We will facet by year ~ month, and each subgraph will
# show week-of-month versus weekday
# the year is simple
dat$year <- as.numeric(as.POSIXlt(dat$date)$year+1900)
# the month too
dat$month <- as.numeric(as.POSIXlt(dat$date)$mon+1)
# but turn months into ordered facors to control the appearance/ordering in the presentation
dat$monthf<-factor(dat$month,
levels=as.character(1:12),
labels=c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"),
ordered=TRUE)
# the day of week is again easily found
dat$weekday = as.POSIXlt(dat$date)$wday
# I use the reverse function rev here to order the week top down in the graph
dat$weekdayf<-factor(dat$weekday,
levels=rev(c(1, 2, 3, 4, 5, 6, 0)),
labels=rev(c("Mon","Tue","Wed","Thu","Fri","Sat", "Sun")),
ordered=TRUE)
# first a factor which cuts the data into month chunks
dat$yearmonth<-as.yearmon(dat$date)
dat$yearmonthf<-factor(dat$yearmonth)
# then find the "week of year" for each day
dat$week <- as.numeric(format(dat$date,"%W"))
# and now for each monthblock we normalize the week to start at 1
dat <- ddply(dat,
.(yearmonthf),
transform,
monthweek=1+week-min(week))
## Previewdata
head(dat)
library(plotly)
ggplotly(ggplot(dat, aes(monthweek, weekdayf, fill = date_total)) +
geom_tile(colour = "white") + facet_grid(year~monthf) + scale_fill_gradient(low="green", high="red") +
xlab("\n\nWeek of Month") + ylab("")  + theme_classic() + scale_x_continuous(breaks = seq(1, 6, 1)))
pur_hist %>%
group_by(store) %>%
summarise(date_total=sum(totalprice))
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
library(quantmod)
library(ggplot2)
library(zoo)
library(plotly)
library(RPostgres)
library(DBI)
con <- dbConnect(
Postgres(),
dbname = "d2sjdih8tegcuc",
host = "ec2-184-72-238-22.compute-1.amazonaws.com",
port = '5432',
user = "xkktypszvisogc",
password = "35b7eb67cab6ea1750e5877d61c3415851d6f1ca9c5782ec0b6bf91ede8acbea",
sslmode = 'require'
)
## Aggregate by date
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery")
write.csv(pur_hist, './purchase_history.csv')
runApp()
shiny::runApp()
shiny::runApp()
devtools::install_github("glin/reactable")
shiny::runApp()
library(RPostgres)
library(DBI)
con <- dbConnect(
Postgres(),
dbname = "d2sjdih8tegcuc",
host = "ec2-184-72-238-22.compute-1.amazonaws.com",
port = '5432',
user = "xkktypszvisogc",
password = "35b7eb67cab6ea1750e5877d61c3415851d6f1ca9c5782ec0b6bf91ede8acbea",
sslmode = 'require'
)
# df = data.frame("item" = character(1),
#                 "unitprice"= double(1),
#                 "totalprice"= double(1),
#                 "date" = Sys.Date(),
#                 "store" = character(1),
#                 stringsAsFactors = FALSE)
###dbWriteTable(con, "grocery", df, overwrite=FALSE)
query <- "UPDATE grocery
SET store='KKM SASHIMI SOYSAUCE 29'
WHERE store='KKM SASHIMI SOYSAUCE'"
dbSendStatement(con, query)
query <- "UPDATE grocery
SET item='KKM SASHIMI SOYSAUCE 29'
WHERE item='KKM SASHIMI SOYSAUCE'"
dbSendStatement(con, query)
runApp()
query <- "UPDATE grocery
SET item='KKM SASHIMI SOYSAUCE'
WHERE item='KKM SASHIMI SOYSAUCE 29'"
dbSendStatement(con, query)
runApp()
runApp()
runApp()
pur_hist <- pur_hist %>%
separate('date', sep="-", into = c("year", "month", "day"))
curr_month <- format(Sys.Date(), "%m")
pur_hist_curr_month <- pur_hist[pur_hist$month == curr_month, ]
df <- pur_hist_curr_month %>%
group_by(store) %>%
summarise(store_total=sum(totalprice))
store_max <- df$store[df$store == max(df$store_total)]
pur_hist <- pur_hist %>%
separate('date', sep="-", into = c("year", "month", "day"))
curr_month <- format(Sys.Date(), "%m")
pur_hist_curr_month <- pur_hist[pur_hist$month == curr_month, ]
df <- pur_hist_curr_month %>%
group_by(store) %>%
summarise(store_total=sum(totalprice))
ur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("item", "unitprice", "totalprice", "date", "store")
pur_hist <- pur_hist[c("date", 'item', 'store', 'unitprice', 'totalprice')]
pur_hist <-  pur_hist[!(is.na(pur_hist$item) | pur_hist$item==""), ]
pur_hist <- dbGetQuery(con, "SELECT * FROM grocery ORDER BY Date DESC")
colnames(pur_hist) <- c("item", "unitprice", "totalprice", "date", "store")
pur_hist <- pur_hist[c("date", 'item', 'store', 'unitprice', 'totalprice')]
pur_hist <-  pur_hist[!(is.na(pur_hist$item) | pur_hist$item==""), ]
pur_hist <- pur_hist %>%
separate('date', sep="-", into = c("year", "month", "day"))
curr_month <- format(Sys.Date(), "%m")
pur_hist_curr_month <- pur_hist[pur_hist$month == curr_month, ]
df <- pur_hist_curr_month %>%
group_by(store) %>%
summarise(store_total=sum(totalprice))
store_max <- df$store[df$store == max(df$store_total)]
store_max
df
df[df$store == max(df$store_total)]
df$store[df$store == max(df$store_total)]
df$store[which.max(df$store_total)]
runApp()
shiny::runApp()
shiny::runApp()
runApp()
install.packages("shinyhelper")
runApp()
runApp('scratch_file.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
## Import library
library(RPostgres)
# Connect to my Heroku PostgreSQL database
con <- dbConnect(
Postgres(),
dbname = "d2sjdih8tegcuc",
host = "ec2-184-72-238-22.compute-1.amazonaws.com",
port = '5432',
user = "xkktypszvisogc",
password = "35b7eb67cab6ea1750e5877d61c3415851d6f1ca9c5782ec0b6bf91ede8acbea",
sslmode = 'require'
)
shiny::runApp()
runApp()
## Import library
library(RPostgres)
# Connect to my Heroku PostgreSQL database
con <- dbConnect(
Postgres(),
dbname = "d2sjdih8tegcuc",
host = "ec2-184-72-238-22.compute-1.amazonaws.com",
port = '5432',
user = "xkktypszvisogc",
password = "35b7eb67cab6ea1750e5877d61c3415851d6f1ca9c5782ec0b6bf91ede8acbea",
sslmode = 'require'
)
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
x <- "cream cheese"
gsub(' ', "+", x)
y <- gsub(' ', "+", x)
GET(sprintf("https://backflipp.wishabi.com/flipp/items/search?locale=en-ca&postal_code=M4Y2W4&q=%s&limit=1000", y))
sprintf("https://backflipp.wishabi.com/flipp/items/search?locale=en-ca&postal_code=M4Y2W4&q=%s&limit=1000", y)
shiny::runApp()
install.packages("install.packages("styler")")
install.packages("styler")
styler:::set_style_transformers()
shiny::runApp()
